labs(title = "Weekday Total Ridership per Hour – UVA Stops",
x = "Hour of the Day", y = "Total Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))+
transition_time(Hour) +
ease_aes('linear')
# Animate and save the output
anim <- animate(p, nframes = 24, fps = 4, width = 600, height = 400, renderer = gifski_renderer(),end_pause = 10)
anim_save("uva_ride.gif", animation = anim)
# (Assuming your data processing code is already done and df_anim contains one row per hour)
df_anim <- filter(hourly_avg, StopType == "UVA Stop") %>%
arrange(Hour)
# Create a cumulative data frame:
df_cum <- do.call(rbind, lapply(sort(unique(df_anim$Hour)), function(h) {
subset <- df_anim %>% filter(Hour <= h)
subset$frame <- h  # add a new column for the animation frame
subset
}))
# Plot using transition_manual() based on the cumulative 'frame' column.
p <- ggplot(df_cum, aes(x = factor(Hour), y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Weekday Average Ridership per Hour – UVA Stops",
subtitle = "Up to Hour: {current_frame}",
x = "Hour of the Day", y = "Average Ridership per Hour") +
theme_classic() +
scale_x_discrete(limits = as.character(0:23)) +
transition_manual(frame)
anim <- animate(p, nframes = length(unique(df_cum$frame)), fps = 4,
width = 600, height = 400, renderer = gifski_renderer(loop = FALSE))
anim_save("cum_uva_histogram.gif", animation = anim)
library(dplyr)
library(tidyverse)
library(leaflet)
library(lubridate)
library(sf)
library(leaflet.extras)
library(readr)
library(gganimate)
library(magick)
library(gifski)
df <- read_csv("~/Downloads/Transit_2020.csv")
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df <- df %>%
filter(FareCategory %in% c("UVA", "Trolley Free Ride"))
df$FareCategory <- ifelse(grepl("UVA", df$FareCategory), "UVA", "Non-UVA")
# Step 2: Classify stops based on whether they EVER had a UVA fare
stop_type <- df %>%
group_by(Stop) %>%
summarise(StopType = ifelse(all(FareCategory == "UVA"), "UVA Stop", "Non-UVA Stop"))
# Step 3: Join back into original data
df <- df %>%
left_join(stop_type, by = "Stop")
# Step 2: Create time features
df <- df %>%
mutate(Date_Time = ymd_hms(Date_Time),
Hour = hour(Date_Time)-4,
Date = as.Date(Date_Time))
df$Hour <- ifelse(df$Hour<0, df$Hour + 24, df$Hour)
# Step 3: Filter to weekdays
df_weekdays <- df %>%
filter(wday(Date_Time) %in% 2:6)
# Step 4: Total ridership per hour per day per StopType
hourly_totals <- df_weekdays %>%
group_by(StopType, Date, Hour) %>%
summarise(Daily_Total_Ridership = sum(Count, na.rm = TRUE), .groups = "drop")
# Step 5: Average ridership per hour per StopType
hourly_avg <- hourly_totals %>%
group_by(StopType, Hour) %>%
summarise(Average_Ridership = mean(Daily_Total_Ridership, na.rm = TRUE), .groups = "drop")
p <- ggplot(filter(hourly_avg, StopType == "Non-UVA Stop"),
aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Weekday Total Ridership per Hour – Non-UVA Stops",
x = "Hour of the Day", y = "Total Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))+
transition_time(Hour) +
ease_aes('linear')
# Animate and save the output
anim <- animate(p, nframes = 24, fps = 4, width = 600, height = 400, renderer = gifski_renderer(),end_pause = 10)
anim_save("non-uva_ride.gif", animation = anim)
df_anim <- filter(hourly_avg, StopType == "Non-UVA Stop") %>%
arrange(Hour)
# Create a cumulative data frame:
df_cum <- do.call(rbind, lapply(sort(unique(df_anim$Hour)), function(h) {
subset <- df_anim %>% filter(Hour <= h)
subset$frame <- h  # add a new column for the animation frame
subset
}))
# Plot using transition_manual() based on the cumulative 'frame' column.
p <- ggplot(df_cum, aes(x = factor(Hour), y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Weekday Average Ridership per Hour – Non-UVA Stops",
subtitle = "Up to Hour: {current_frame}",
x = "Hour of the Day", y = "Average Ridership per Hour") +
theme_classic() +
scale_x_discrete(limits = as.character(0:23)) +
transition_manual(frame)
anim <- animate(p, nframes = length(unique(df_cum$frame)), fps = 4,
width = 600, height = 400, renderer = gifski_renderer(loop = FALSE))
anim_save("cum_non_histogram.gif", animation = anim)
library(dplyr)
library(tidyverse)
library(leaflet)
library(lubridate)
library(sf)
library(leaflet.extras)
library(readr)
library(gganimate)
library(magick)
library(gifski)
df <- read_csv("~/Downloads/Transit_2020.csv")
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df <- df %>%
filter(FareCategory %in% c("UVA", "Trolley Free Ride"))
df$FareCategory <- ifelse(grepl("UVA", df$FareCategory), "UVA", "Non-UVA")
# Step 2: Classify stops based on whether they EVER had a UVA fare
stop_type <- df %>%
group_by(Stop) %>%
summarise(StopType = ifelse(all(FareCategory == "UVA"), "UVA Stop", "Non-UVA Stop"))
# Step 3: Join back into original data
df <- df %>%
left_join(stop_type, by = "Stop")
# Step 2: Create time features
df <- df %>%
mutate(Date_Time = ymd_hms(Date_Time),
Hour = hour(Date_Time)-4,
Date = as.Date(Date_Time))
df$Hour <- ifelse(df$Hour<0, df$Hour + 24, df$Hour)
# Step 3: Filter to weekdays
df_weekdays <- df %>%
filter(wday(Date_Time) %in% 2:6)
# Step 4: Total ridership per hour per day per StopType
hourly_totals <- df_weekdays %>%
group_by(StopType, Date, Hour) %>%
summarise(Daily_Total_Ridership = sum(Count, na.rm = TRUE), .groups = "drop")
# Step 5: Average ridership per hour per StopType
hourly_avg <- hourly_totals %>%
group_by(StopType, Hour) %>%
summarise(Average_Ridership = mean(Daily_Total_Ridership, na.rm = TRUE), .groups = "drop")
p <- ggplot(filter(hourly_avg, StopType == "Non-UVA Stop"),
aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Weekday Total Ridership per Hour – Non-UVA Stops",
x = "Hour of the Day", y = "Total Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))+
transition_time(Hour) +
ease_aes('linear')
# Animate and save the output
anim <- animate(p, nframes = 24, fps = 4, width = 600, height = 400, renderer = gifski_renderer(),end_pause = 10)
anim_save("non-uva_ride.gif", animation = anim)
df_anim <- filter(hourly_avg, StopType == "Non-UVA Stop") %>%
arrange(Hour)
# Create a cumulative data frame:
df_cum <- do.call(rbind, lapply(sort(unique(df_anim$Hour)), function(h) {
subset <- df_anim %>% filter(Hour <= h)
subset$frame <- h  # add a new column for the animation frame
subset
}))
# Plot using transition_manual() based on the cumulative 'frame' column.
p <- ggplot(df_cum, aes(x = factor(Hour), y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "maroon") +
labs(title = "Weekday Average Ridership per Hour – Non-UVA Stops",
subtitle = "Up to Hour: {current_frame}",
x = "Hour of the Day", y = "Average Ridership per Hour") +
theme_classic() +
scale_x_discrete(limits = as.character(0:23)) +
transition_manual(frame)
anim <- animate(p, nframes = length(unique(df_cum$frame)), fps = 4,
width = 600, height = 400, renderer = gifski_renderer(loop = FALSE))
anim_save("cum_non_histogram.gif", animation = anim)
#classify uva and non-uva
df_uva <- df %>%
filter(StopType == "UVA Stop") %>%
select(Latitude, Longitude, Count) %>%
na.omit()
df_nonuva <- df %>%
filter(StopType == "Non-UVA Stop") %>%
select(Latitude, Longitude, Count) %>%
na.omit()
view(df_uva)
table(df_uva)
summarise(df_uva)
#df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_uva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_nonuva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
view(df_uva)
view(df_nonuva)
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
df_uva <- df %>%
filter(StopType == "UVA Stop") %>%
select(Latitude, Longitude, Count)
#classify uva and non-uva
df_uva <- df %>%
filter(StopType == "UVA Stop") %>%
select(Latitude, Longitude, Count)
##|>na.omit()
df_nonuva <- df %>%
filter(StopType == "Non-UVA Stop") %>%
select(Latitude, Longitude, Count)
##|>na.omit()
#df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_uva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_nonuva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
#df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_uva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_uva$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_nonuva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_nonuva$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
df_uva
view(df_uva)
view(df_nonuva)
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df <- df %>%
filter(FareCategory %in% c("UVA", "Trolley Free Ride"))
df$FareCategory <- ifelse(grepl("UVA", df$FareCategory), "UVA", "Non-UVA")
# Step 2: Classify stops based on whether they EVER had a UVA fare
stop_type <- df %>%
group_by(Stop) %>%
summarise(StopType = ifelse(all(FareCategory == "UVA"), "UVA Stop", "Non-UVA Stop"))
# Step 3: Join back into original data
df <- df %>%
left_join(stop_type, by = "Stop")
# Step 2: Create time features
df <- df %>%
mutate(Date_Time = ymd_hms(Date_Time),
Hour = hour(Date_Time)-4,
Date = as.Date(Date_Time))
df$Hour <- ifelse(df$Hour < 0, df$Hour + 24, df$Hour)
# Step 3: Filter to weekdays
df_weekdays <- df %>%
filter(wday(Date_Time) %in% 2:6)
# Step 4: Total ridership per hour per day per StopType
hourly_totals <- df_weekdays %>%
group_by(StopType, Date, Hour) %>%
summarise(Daily_Total_Ridership = sum(Count, na.rm = TRUE), .groups = "drop")
library(dplyr)
library(tidyverse)
library(leaflet)
library(lubridate)
library(sf)
library(leaflet.extras)
library(readr)
df <- read_csv("~/Downloads/Transit_2020.csv")
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df <- df %>%
filter(FareCategory %in% c("UVA", "Trolley Free Ride"))
df$FareCategory <- ifelse(grepl("UVA", df$FareCategory), "UVA", "Non-UVA")
# Step 2: Classify stops based on whether they EVER had a UVA fare
stop_type <- df %>%
group_by(Stop) %>%
summarise(StopType = ifelse(all(FareCategory == "UVA"), "UVA Stop", "Non-UVA Stop"))
# Step 3: Join back into original data
df <- df %>%
left_join(stop_type, by = "Stop")
# Step 2: Create time features
df <- df %>%
mutate(Date_Time = ymd_hms(Date_Time),
Hour = hour(Date_Time)-4,
Date = as.Date(Date_Time))
df$Hour <- ifelse(df$Hour < 0, df$Hour + 24, df$Hour)
# Step 3: Filter to weekdays
df_weekdays <- df %>%
filter(wday(Date_Time) %in% 2:6)
# Step 4: Total ridership per hour per day per StopType
hourly_totals <- df_weekdays %>%
group_by(StopType, Date, Hour) %>%
summarise(Daily_Total_Ridership = sum(Count, na.rm = TRUE), .groups = "drop")
# Step 5: Average ridership per hour per StopType
hourly_avg <- hourly_totals %>%
group_by(StopType, Hour) %>%
summarise(Average_Ridership = mean(Daily_Total_Ridership, na.rm = TRUE), .groups = "drop")
ggplot(filter(hourly_avg, StopType == "UVA Stop"),
aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Weekday Total Ridership per Hour – UVA Stops",
x = "Hour of the Day", y = "Total Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))
ggplot(filter(hourly_avg, StopType == "Non-UVA Stop"),
aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "firebrick") +
labs(title = "Weekday Average Ridership per Hour – Non-UVA Stops",
x = "Hour of the Day", y = "Average Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))
#df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_uva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_uva$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
# Save the interactive map as an HTML file
saveWidget(heat_map, "heat_map.html")
library(webshot)
# Capture the HTML map as a PNG image
webshot("heat_map.html", file = "heat_map.png")
library(htmlwidgets)
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
circle_map <- leaflet(df_uva) |>
addTiles() |>
addCircles(
lng = ~Longitude, lat = ~Latitude,
radius = ~Count * 10,
weight = 1, color = "red", fillOpacity = 0.5,
popup = ~paste("Ridership Count:", Count)
) |>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
saveWidget(circle_map, "dot_dens_map.html",selfcontained = TRUE)
library(webshot)
# Capture the HTML map as a PNG image
webshot("dot_dens_map.html", file = "dot_dens_map.png")
#df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_uva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_uva$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
# Save the interactive map as an HTML file
saveWidget(heat_map, "heat_map.html")
library(webshot)
# Capture the HTML map as a PNG image
webshot("heat_map.html", file = "heat_map.png")
?ymd_hms
