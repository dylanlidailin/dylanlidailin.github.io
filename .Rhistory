)
server <- function(input, output) {
new_fastfood <- reactive({
req(input$restaurant)
filter(fastfood, restaurant %in% input$restaurant)
})
output$scatterplot <- renderPlot({
ggplot(new_fastfood(), aes_string(x = input$num1, y = input$num2, color = "restaurant")) +
geom_jitter() +
scale_color_brewer(palette = input$num3) +
theme_minimal()
})
}
shinyApp(ui, server)
library(openintro)
fastfood <- read.csv("./fastfood.csv")
fastfood <- read.csv("fastfood.csv")
fastfood <- read.csv("../App/fastfood.csv")
library(readr)
fastfood <- read.csv("../App/fastfood.csv")
install.packages(glmmTMB)
install.packages('glmmTMB')
anova(blush.lmm,type="III")
#Rejct the null hypothesis
#Cannot reject null hypothesis for interaction
# Reporting lsmeans for impacts of fence, history, and fence x history groups
emmeans(blush.lmm,pairwise~fence)
emmeans(blush.lmm,pairwise~history)
emmeans(blush.lmm,pairwise~fence:history)
# conducting interaction contrasts:
emmeans(blush.lmm,pairwise~history|fence)
install.packages('glmmTMB')
install.packages('TMB', type = 'source')
#What is the probability that a randomly chosen student is taller than 180 cm?
pnorm(180,170,10)
?pnorm
#What proportion of students are between 160 cm and 180 cm tall?
dnorm(180,mean,sd)-dnorm(160,mean,sd)
mean = 170
sd = 10
#What proportion of students are between 160 cm and 180 cm tall?
dnorm(180,mean,sd)-dnorm(160,mean,sd)
#What proportion of students are between 160 cm and 180 cm tall?
dnorm(180,mean,sd)
#What proportion of students are between 160 cm and 180 cm tall?
pnorm(180,mean,sd)-pnorm(160,mean,sd)
#What is the height corresponding to the 90th percentile?
qnorm(0.9,mean,sd)
#What is the probability that a randomly chosen student is taller than 180 cm?
1-pnorm(180,170,10) # 0.8413447
mean = 2
sd = 0.5
#What is the probability that a parcel takes more than 3 days to arrive?
1-pnorm(3,mean,sd)
#What percentage of parcels are delivered between 1.5 and 2.5 days?
pnorm(1.5,mean,sd)-pnorm(2.5,mean,sd) |> abs()
?abs
#What percentage of parcels are delivered between 1.5 and 2.5 days?
pnorm(1.5,mean,sd)-pnorm(2.5,mean,sd) |> abs()
#What percentage of parcels are delivered between 1.5 and 2.5 days?
parc<-pnorm(1.5,mean,sd)-pnorm(2.5,mean,sd) |> abs()
parc
abs(parc)
#What is the maximum delivery time for the fastest 5% of parcels (i.e., 5th percentile)?
qnorm(0.05,mean,sd)
mean = 170
sd = 10
1-pnorm(180,170,10) # 0.16
pnorm(180,mean,sd)-pnorm(160,mean,sd) # 0.68
qnorm(0.9,mean,sd) # 182.81
mean = 2 sd = 0.5
mean = 2
sd = 0.5
mean = 2
sd = 0.5
1-pnorm(3,mean,sd) # 0.02
pnorm(2.5,mean,sd)-pnorm(1.5,mean,sd) # 0.7
qnorm(0.05,mean,sd) #1.2
n_samples <- 1000
# Store averages here
averages <- numeric(n_samples)
# Simulation: Roll 2 dice and take the average, 1000 times
for (i in 1:n_samples) {
rolls <- sample(1:6, size = 2, replace = TRUE)  # roll 2 dice
averages[i] <- mean(rolls)
}
# Plot the sampling distribution
hist(averages,
breaks = 11,             # possible averages: 1 to 6 in steps of 0.5
col = "skyblue",
main = "Sampling Distribution of Dice Roll Averages (2 Dice)",
xlab = "Average of 2 Dice Rolls",
ylab = "Frequency")
?numeric
numeric(10)
numeric(2)
#assume the confidence interval is 95%
critical_val <- pnorm(0.975)
critical_val
#assume the confidence interval is 95%
critical_val <- qnorm(0.975)
critical_val
#assume the confidence interval is 95%
critical_val <- qnorm(0.975,mean=0,sd=1)
critical_val
sd(c(1,1,1,2,2,2))
?pt
?pt
?pnorm
pnorm(1011,0,0.016)
pnorm(0.471,0.5,0.016)
qt(0.975)
qt(0.975,1010)
qnorm(0.975)
qnorm(0.975)*sqrt((0.471)(1-0.471)/1011)
(0.471)(1-0.471)/1011
qnorm(0.975)*sqrt(0.471(1-0.471)/1011)
0.471(1-0.471)/1011
1-0.471
0.471*0.529
0.249159/1011
sqrt(0.0002464481)
qnorm(0.975)*0.01569867
getwd()
setwd("~/uvabus")
library(shiny); runApp('Busapp.R')
install.packages(rmarkdown)
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages('shiny')
runApp('Busapp.R')
install.packages('markdown')
runApp('Busapp.R')
install.packages('xfun')
runApp('Busapp.R')
install.packages('xfun')
library(shiny); runApp('Busapp.R')
runApp('Busapp.R')
getwd()
runApp('Busapp.R')
library(dplyr)
library(tidyverse)
library(leaflet)
library(lubridate)
library(sf)
library(leaflet.extras)
library(readr)
df <- read_csv("~/Downloads/Transit_2020.csv")
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
#use ifelse statement
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
prop.test(c(52126,50921),c(103047,103047))
#P(UVA)-P(Trolley) = [0.51,0.49]
ggplot(filter(avg_hourly, FareCategory == "Others"),
aes(x = Hour, y = avg_riders)) +
geom_col(fill = "red") +
labs(title = "Average Ridership per Hour - Non-UVA Buses",
x = "Hour of Day", y = "Average Riders") +
theme_minimal()
df <- df |>
mutate(Date_Time = ymd_hms(Date_Time),
Hour = hour(Date_Time),
Date = as.Date(Date_Time))
df_weekdays <- df |>
filter(is.element(wday(Date_Time), 2:6))
hourly_totals <- df_weekdays |>
group_by(Date, Hour) |>
summarise(Daily_Total_Ridership = sum(Count, na.rm = TRUE), .groups = 'drop')
hourly_avg <- hourly_totals |>
group_by(Hour) |>
summarise(Average_Ridership = mean(Daily_Total_Ridership, na.rm = TRUE))
ggplot(hourly_avg, aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Weekday Average Ridership by Hour",
x = "Hour of the Day",
y = "Average Ridership Per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))
df <- df |>
mutate(Date_Time = ymd_hms(Date_Time, tz = "UTC"))
df_afternoon <- df |>
filter(hour(Date_Time) >= 21 & hour(Date_Time) <= 22)
#classify uva and non-uva
df_uva <- df %>%
filter(StopType == "UVA Stop") %>%
select(Latitude, Longitude, Count) %>%
na.omit()
df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_afternoon)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
library(leaflet)
library(htmlwidgets)
library(sf)
# Load the data and boundary
df_afternoon <- df_afternoon |> select(Latitude, Longitude, Count) |> na.omit()
# Reading the boundary geojson file
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
# Coordinates for University of Virginia
uva_lat <- 38.0336
uva_lon <- -78.5070
# Generate the leaflet map
heat_map <- leaflet(df_afternoon) |>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_afternoon$Count, na.rm = TRUE)
) |>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
# Save the interactive map as an HTML file
saveWidget(heat_map, "heat_map.html")
library(leaflet)
library(htmlwidgets)
library(sf)
# Load the data and boundary
df_afternoon <- df_afternoon |> select(Latitude, Longitude, Count) |> na.omit()
# Reading the boundary geojson file
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
# Coordinates for University of Virginia
uva_lat <- 38.0336
uva_lon <- -78.5070
# Generate the leaflet map
heat_map <- leaflet(df_afternoon) |>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_afternoon$Count, na.rm = TRUE)
) |>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
# Save the interactive map as an HTML file
saveWidget(heat_map, "heat_map.html")
library(webshot)
# Capture the HTML map as a PNG image
webshot("heat_map.html", file = "heat_map.png")
install_phantomjs()
library(leaflet)
library(htmlwidgets)
library(sf)
# Load the data and boundary
df_afternoon <- df_afternoon |> select(Latitude, Longitude, Count) |> na.omit()
# Reading the boundary geojson file
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
# Coordinates for University of Virginia
uva_lat <- 38.0336
uva_lon <- -78.5070
# Generate the leaflet map
heat_map <- leaflet(df_afternoon) |>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_afternoon$Count, na.rm = TRUE)
) |>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
# Save the interactive map as an HTML file
saveWidget(heat_map, "heat_map.html")
library(webshot)
# Capture the HTML map as a PNG image
webshot("heat_map.html", file = "heat_map.png")
getwd()
install.packages("webshot")
library(leaflet)
library(htmlwidgets)
library(sf)
# Load the data and boundary
df_afternoon <- df_afternoon |> select(Latitude, Longitude, Count) |> na.omit()
library(dplyr)
library(tidyverse)
library(leaflet)
library(lubridate)
library(sf)
library(leaflet.extras)
library(readr)
df <- read_csv("~/Downloads/Transit_2020.csv")
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
#use ifelse statement
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
prop.test(c(52126,50921),c(103047,103047))
#P(UVA)-P(Trolley) = [0.51,0.49]
ggplot(filter(avg_hourly, FareCategory == "Others"),
aes(x = Hour, y = avg_riders)) +
geom_col(fill = "red") +
labs(title = "Average Ridership per Hour - Non-UVA Buses",
x = "Hour of Day", y = "Average Riders") +
theme_minimal()
library(leaflet)
library(htmlwidgets)
library(sf)
# Load the data and boundary
df_afternoon <- df_afternoon |> select(Latitude, Longitude, Count) |> na.omit()
# Reading the boundary geojson file
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
# Coordinates for University of Virginia
uva_lat <- 38.0336
uva_lon <- -78.5070
# Generate the leaflet map
heat_map <- leaflet(df_afternoon) |>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df_afternoon$Count, na.rm = TRUE)
) |>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
# Save the interactive map as an HTML file
saveWidget(heat_map, "heat_map.html")
library(webshot)
# Capture the HTML map as a PNG image
webshot("heat_map.html", file = "heat_map.png")
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_nonuva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
df_afternoon <- df_afternoon|>select(Latitude, Longitude, Count) |> na.omit()
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_afternoon)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
heat_map <- leaflet(df_nonuva)|>
addTiles() |>
addHeatmap(
lng = ~Longitude, lat = ~Latitude,
intensity = ~Count,
blur = 20, radius = 15, max = max(df$Count, na.rm = TRUE)
)|>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
library(dplyr)
library(tidyverse)
library(leaflet)
library(lubridate)
library(sf)
library(leaflet.extras)
library(readr)
df <- read_csv("~/Downloads/Transit_2020.csv")
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
#use ifelse statement
df$FareCategory = ifelse(grepl("UVA", df$FareCategory), "UVA", df$FareCategory)
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
prop.test(c(52126,50921),c(103047,103047))
#P(UVA)-P(Trolley) = [0.51,0.49]
ggplot(filter(avg_hourly, FareCategory == "Others"),
aes(x = Hour, y = avg_riders)) +
geom_col(fill = "red") +
labs(title = "Average Ridership per Hour - Non-UVA Buses",
x = "Hour of Day", y = "Average Riders") +
theme_minimal()
df <- read.csv("~/Downloads/Transit_2020.csv")
df$FareCategory <- ifelse(grepl("UVA", df$FareCategory), "UVA", "Non-UVA")
# Step 2: Classify stops based on whether they EVER had a UVA fare
stop_type <- df %>%
group_by(Stop) %>%
summarise(StopType = ifelse(any(FareCategory == "UVA"), "UVA Stop", "Non-UVA Stop"))
# Step 3: Join back into original data
df <- df %>%
left_join(stop_type, by = "Stop")
# Step 2: Create time features
df <- df %>%
mutate(Date_Time = ymd_hms(Date_Time),
Hour = hour(Date_Time),
Date = as.Date(Date_Time))
# Step 3: Filter to weekdays
df_weekdays <- df %>%
filter(wday(Date_Time) %in% 2:6)
# Step 4: Total ridership per hour per day per StopType
hourly_totals <- df_weekdays %>%
group_by(StopType, Date, Hour) %>%
summarise(Daily_Total_Ridership = sum(Count, na.rm = TRUE), .groups = "drop")
# Step 5: Average ridership per hour per StopType
hourly_avg <- hourly_totals %>%
group_by(StopType, Hour) %>%
summarise(Average_Ridership = mean(Daily_Total_Ridership, na.rm = TRUE), .groups = "drop")
ggplot(filter(hourly_avg, StopType == "UVA Stop"),
aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Weekday Average Ridership per Hour – UVA Stops",
x = "Hour of the Day", y = "Average Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))
ggplot(filter(hourly_avg, StopType == "Non-UVA Stop"),
aes(x = Hour, y = Average_Ridership)) +
geom_bar(stat = "identity", fill = "firebrick") +
labs(title = "Weekday Average Ridership per Hour – Non-UVA Stops",
x = "Hour of the Day", y = "Average Ridership per Hour") +
theme_classic() +
scale_x_continuous(breaks = seq(0, 23, 1))
