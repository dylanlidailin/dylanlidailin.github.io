popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
heat_map
charlottesville_boundary <- st_read("~/Downloads/Municipal_Boundary_Area.geojson")
charlottesville_boundary <- st_zm(charlottesville_boundary)
uva_lat <- 38.0336
uva_lon <- -78.5070
circle_map <- leaflet(df) |>
addTiles() |>
addCircles(
lng = ~Longitude, lat = ~Latitude,
radius = ~Count * 10,
weight = 1, color = "red", fillOpacity = 0.5,
popup = ~paste("Ridership Count:", Count)
) |>
addPolygons(
data = charlottesville_boundary,
color = "blue", weight = 2, fillOpacity = 0.1,
popup = "Charlottesville City Boundary"
) |>
addMarkers(
lng = uva_lon, lat = uva_lat,
popup = "University of Virginia",
label = "University of Virginia",
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
) |>
setView(lng = -78.5070, lat = 38.0336, zoom = 13)
circle_map
value_counts(df$FareCategory)
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc())
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
df |> group_by(FareCategory) |> summarise(n=n()) |> arrange(desc(n))
sqrt((6.61/30)^2+(8.27/30)^2)
sqrt(6.61/30)+(8.27/30))
sqrt(6.61/30)+(8.27/30)
3.71/1.93
qt(0.975,29)
pt(0.975,29)
1-qt(0.975,29)
1-pt(0.975,29)
pt(1.92,29)
pt(1.92,29)*2
pt(-1.92,29)
pt(1.92,29)*2
pt(-1.92,29)
sqrt(6.61^2/30)+(8.27^2/30)
sqrt((6.61^2/30)+(8.27^2/30))
3.71/1.93
library(openintro)
library(shinythemes)
library(shiny)
library(tidyverse)
fastfood<-read.csv("ClassAct/fastfood.csv")
ui <- fluidPage(theme=shinytheme("cyborg"),
titlePanel("Our Data Displays"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "num1",
label="Select a variable for the x axis:",
choices = ("restaurant","item","calories","cal_fat","total_fat","sat_fat","trans_fat","cholesterol","sodium","total_carb","fiber","sugar","protein","vit_a","vit_c","calcium","salad")
library(openintro)
library(shinythemes)
library(shiny)
library(tidyverse)
fastfood<-read.csv("ClassAct/fastfood.csv")
ui <- fluidPage(theme=shinytheme("cyborg"),
titlePanel("Our Data Displays"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "num1",
label="Select a variable for the x axis:",
choices = c("restaurant","item","calories","cal_fat","total_fat","sat_fat","trans_fat","cholesterol","sodium","total_carb","fiber","sugar","protein","vit_a","vit_c","calcium","salad")
selectInput(selectInput(
library(openintro)
library(shinythemes)
library(shiny)
library(tidyverse)
fastfood <- read.csv("ClassAct/fastfood.csv")
ui <- fluidPage(
theme = shinytheme("cyborg"),
titlePanel("Our Data Displays"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "num1",
label = "Select a variable for the x axis:",
choices = c("restaurant", "item", "calories", "cal_fat", "total_fat", "sat_fat", "trans_fat", "cholesterol",
"sodium", "total_carb", "fiber", "sugar", "protein", "vit_a", "vit_c", "calcium", "salad")
),
selectInput(
inputId = "num2",
label = "Select a variable for the y axis:",
choices = c("restaurant", "item", "calories", "cal_fat", "total_fat", "sat_fat", "trans_fat", "cholesterol",
"sodium", "total_carb", "fiber", "sugar", "protein", "vit_a", "vit_c", "calcium", "salad")
),
checkboxGroupInput(
inputId = "restaurant",
label = "Select restaurant:",
choices = unique(fastfood$restaurant),
selected = c("Mcdonalds", "Chick Fil-A", "Sonic", "Arbys", "Burger King", "Dairy Queen")
),
selectInput(
inputId = "num3",
label = "Select a Brewer Color Palette:",
choices = c("Spectral", "Set1", "Dark2", "Paired", "Blues")
)
),
mainPanel(
plotOutput("scatterplot"),
tableOutput("ourdata")
)
)
)
server <- function(input, output) {
new_fastfood <- reactive({
req(input$restaurant)
filter(fastfood, restaurant %in% input$restaurant)
})
output$scatterplot <- renderPlot({
ggplot(new_fastfood(), aes_string(x = input$num1, y = input$num2, color = "restaurant")) +
geom_jitter() +
scale_color_brewer(palette = input$num3) +
theme_minimal()
})
output$ourdata <- renderTable({
head(new_fastfood())
})
}
shinyApp(ui, server)
library(openintro)
library(shinythemes)
library(shiny)
library(tidyverse)
fastfood <- read.csv("ClassAct/fastfood.csv")
ui <- fluidPage(
theme = shinytheme("cyborg"),
titlePanel("Our Data Displays"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "num1",
label = "Select a variable for the x axis:",
choices = c("restaurant", "item", "calories", "cal_fat", "total_fat", "sat_fat", "trans_fat", "cholesterol",
"sodium", "total_carb", "fiber", "sugar", "protein", "vit_a", "vit_c", "calcium", "salad")
),
selectInput(
inputId = "num2",
label = "Select a variable for the y axis:",
choices = c("restaurant", "item", "calories", "cal_fat", "total_fat", "sat_fat", "trans_fat", "cholesterol",
"sodium", "total_carb", "fiber", "sugar", "protein", "vit_a", "vit_c", "calcium", "salad")
),
checkboxGroupInput(
inputId = "restaurant",
label = "Select restaurant:",
choices = unique(fastfood$restaurant),
selected = c("Mcdonalds", "Chick Fil-A", "Sonic", "Arbys", "Burger King", "Dairy Queen")
),
selectInput(
inputId = "num3",
label = "Select a Brewer Color Palette:",
choices = c("Spectral", "Set1", "Dark2", "Paired", "Blues")
)
),
mainPanel(
plotOutput("scatterplot"),
tableOutput("ourdata")
)
)
)
server <- function(input, output) {
new_fastfood <- reactive({
req(input$restaurant)
filter(fastfood, restaurant %in% input$restaurant)
})
output$scatterplot <- renderPlot({
ggplot(new_fastfood(), aes_string(x = input$num1, y = input$num2, color = "restaurant")) +
geom_jitter() +
scale_color_brewer(palette = input$num3) +
theme_minimal()
})
}
shinyApp(ui, server)
library(openintro)
library(shinythemes)
library(shiny)
library(tidyverse)
fastfood <- read.csv("ClassAct/fastfood.csv")
ui <- fluidPage(
theme = shinytheme("cyborg"),
titlePanel("Nutrition Content of Fast Food Restaurants"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "num1",
label = "X-axis:",
choices = c("restaurant", "item", "calories", "cal_fat", "total_fat", "sat_fat", "trans_fat", "cholesterol",
"sodium", "total_carb", "fiber", "sugar", "protein", "vit_a", "vit_c", "calcium", "salad")
),
selectInput(
inputId = "num2",
label = "Y-axis:",
choices = c("restaurant", "item", "calories", "cal_fat", "total_fat", "sat_fat", "trans_fat", "cholesterol",
"sodium", "total_carb", "fiber", "sugar", "protein", "vit_a", "vit_c", "calcium", "salad")
),
checkboxGroupInput(
inputId = "restaurant",
label = "Select Restaurants:",
choices = unique(fastfood$restaurant),
selected = c("Mcdonalds", "Chick Fil-A", "Sonic", "Arbys", "Burger King", "Dairy Queen")
),
selectInput(
inputId = "num3",
label = "Select a Brewer Color Palette:",
choices = c("Spectral", "Set1", "Dark2", "Paired", "Blues")
)
),
mainPanel(
plotOutput("scatterplot"),
tableOutput("ourdata")
)
)
)
server <- function(input, output) {
new_fastfood <- reactive({
req(input$restaurant)
filter(fastfood, restaurant %in% input$restaurant)
})
output$scatterplot <- renderPlot({
ggplot(new_fastfood(), aes_string(x = input$num1, y = input$num2, color = "restaurant")) +
geom_jitter() +
scale_color_brewer(palette = input$num3) +
theme_minimal()
})
}
shinyApp(ui, server)
library(openintro)
fastfood <- read.csv("./fastfood.csv")
fastfood <- read.csv("fastfood.csv")
fastfood <- read.csv("../App/fastfood.csv")
library(readr)
fastfood <- read.csv("../App/fastfood.csv")
install.packages(glmmTMB)
install.packages('glmmTMB')
anova(blush.lmm,type="III")
#Rejct the null hypothesis
#Cannot reject null hypothesis for interaction
# Reporting lsmeans for impacts of fence, history, and fence x history groups
emmeans(blush.lmm,pairwise~fence)
emmeans(blush.lmm,pairwise~history)
emmeans(blush.lmm,pairwise~fence:history)
# conducting interaction contrasts:
emmeans(blush.lmm,pairwise~history|fence)
install.packages('glmmTMB')
install.packages('TMB', type = 'source')
#What is the probability that a randomly chosen student is taller than 180 cm?
pnorm(180,170,10)
?pnorm
#What proportion of students are between 160 cm and 180 cm tall?
dnorm(180,mean,sd)-dnorm(160,mean,sd)
mean = 170
sd = 10
#What proportion of students are between 160 cm and 180 cm tall?
dnorm(180,mean,sd)-dnorm(160,mean,sd)
#What proportion of students are between 160 cm and 180 cm tall?
dnorm(180,mean,sd)
#What proportion of students are between 160 cm and 180 cm tall?
pnorm(180,mean,sd)-pnorm(160,mean,sd)
#What is the height corresponding to the 90th percentile?
qnorm(0.9,mean,sd)
#What is the probability that a randomly chosen student is taller than 180 cm?
1-pnorm(180,170,10) # 0.8413447
mean = 2
sd = 0.5
#What is the probability that a parcel takes more than 3 days to arrive?
1-pnorm(3,mean,sd)
#What percentage of parcels are delivered between 1.5 and 2.5 days?
pnorm(1.5,mean,sd)-pnorm(2.5,mean,sd) |> abs()
?abs
#What percentage of parcels are delivered between 1.5 and 2.5 days?
pnorm(1.5,mean,sd)-pnorm(2.5,mean,sd) |> abs()
#What percentage of parcels are delivered between 1.5 and 2.5 days?
parc<-pnorm(1.5,mean,sd)-pnorm(2.5,mean,sd) |> abs()
parc
abs(parc)
#What is the maximum delivery time for the fastest 5% of parcels (i.e., 5th percentile)?
qnorm(0.05,mean,sd)
mean = 170
sd = 10
1-pnorm(180,170,10) # 0.16
pnorm(180,mean,sd)-pnorm(160,mean,sd) # 0.68
qnorm(0.9,mean,sd) # 182.81
mean = 2 sd = 0.5
mean = 2
sd = 0.5
mean = 2
sd = 0.5
1-pnorm(3,mean,sd) # 0.02
pnorm(2.5,mean,sd)-pnorm(1.5,mean,sd) # 0.7
qnorm(0.05,mean,sd) #1.2
n_samples <- 1000
# Store averages here
averages <- numeric(n_samples)
# Simulation: Roll 2 dice and take the average, 1000 times
for (i in 1:n_samples) {
rolls <- sample(1:6, size = 2, replace = TRUE)  # roll 2 dice
averages[i] <- mean(rolls)
}
# Plot the sampling distribution
hist(averages,
breaks = 11,             # possible averages: 1 to 6 in steps of 0.5
col = "skyblue",
main = "Sampling Distribution of Dice Roll Averages (2 Dice)",
xlab = "Average of 2 Dice Rolls",
ylab = "Frequency")
?numeric
numeric(10)
numeric(2)
#assume the confidence interval is 95%
critical_val <- pnorm(0.975)
critical_val
#assume the confidence interval is 95%
critical_val <- qnorm(0.975)
critical_val
#assume the confidence interval is 95%
critical_val <- qnorm(0.975,mean=0,sd=1)
critical_val
sd(c(1,1,1,2,2,2))
?pt
?pt
?pnorm
pnorm(1011,0,0.016)
pnorm(0.471,0.5,0.016)
qt(0.975)
qt(0.975,1010)
qnorm(0.975)
qnorm(0.975)*sqrt((0.471)(1-0.471)/1011)
(0.471)(1-0.471)/1011
qnorm(0.975)*sqrt(0.471(1-0.471)/1011)
0.471(1-0.471)/1011
1-0.471
0.471*0.529
0.249159/1011
sqrt(0.0002464481)
qnorm(0.975)*0.01569867
install.packages('saveWidget')
install.packages('htmlwidgets')
getwd()
setwd("~/uvabus")
getwd()
# Load required libraries
library(shiny)
library(plotly)
library(gapminder)
library(dplyr)
# UI
ui <- fluidPage(
titlePanel("Gapminder Dashboard"),
radioButtons("vars", "Choose a variable:",
choices = list("Life Expectancy" = "lifeExp",
"Population" = "pop",
"GDP per Capita" = "gdpPercap"),
selected = "gdpPercap"),
sliderInput("year_slider", "Select Year:",
min = min(gapminder$year),
max = max(gapminder$year),
value = min(gapminder$year),
step = 5,
sep = ""),
plotlyOutput("map")
)
# Server
server <- function(input, output, session) {
output$map <- renderPlotly({
data_filtered <- gapminder %>% filter(year == input$year_slider)
plot_ly(data_filtered,
x = ~gdpPercap, y = ~lifeExp,
size = ~pop, color = ~continent,
type = 'scatter', mode = 'markers',
text = ~country) %>%
layout(title = paste("Gapminder Data -", input$year_slider),
xaxis = list(title = "GDP per Capita"),
yaxis = list(title = "Life Expectancy"))
})
}
# Run the app
shinyApp(ui, server)
# Load required libraries
library(shiny)
library(plotly)
library(gapminder)
library(dplyr)
# UI
ui <- fluidPage(
titlePanel("Gapminder Dashboard"),
radioButtons("vars", "Choose a variable:",
choices = list("Life Expectancy" = "lifeExp",
"Population" = "pop",
"GDP per Capita" = "gdpPercap"),
selected = "gdpPercap"),
sliderInput("year_slider", "Select Year:",
min = min(gapminder$year),
max = max(gapminder$year),
value = min(gapminder$year),
step = 5,
sep = ""),
plotlyOutput("map")
)
# Server
server <- function(input, output, session) {
output$map <- renderPlotly({
data_filtered <- gapminder %>% filter(year == input$year_slider)
plot_ly(data_filtered,
x = ~gdpPercap, y = ~lifeExp,
size = ~pop, color = ~continent,
type = 'scatter', mode = 'markers',
text = ~country) %>%
layout(title = paste("Gapminder Data -", input$year_slider),
xaxis = list(title = "GDP per Capita"),
yaxis = list(title = "Life Expectancy"))
})
}
# Run the app
shinyApp(ui, server)
view(gapminder)
gapminder
ui <- fluidPage(
titlePanel("Gapminder Dashboard"),
radioButtons("vars", "Select Variable:",
choices = list("Life Expectancy" = "lifeExp",
"Population" = "pop",
"GDP per Capita" = "gdpPercap"),
selected = "gdpPercap",
inline = TRUE),
sliderInput("year_slider", "Select Year:",
min = min(gapminder$year),
max = max(gapminder$year),
value = min(gapminder$year),
step = 5,
sep = ""),
plotlyOutput("map")
)
server <- function(input, output, session) {
output$map <- renderPlotly({
data_filtered <- gapminder %>%
filter(year == input$year_slider)
plot_ly(data_filtered,
type = 'choropleth',
locations = ~country,
locationmode = 'country names',
z = as.formula(paste0("~", input$vars)),
colorscale = "Viridis",
marker = list(line = list(color = "gray", width = 0.5)),
colorbar = list(title = input$vars)) %>%
layout(title = paste("Gapminder Map -", input$year_slider),
geo = list(showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'equirectangular')))
})
}
shinyApp(ui, server)
# Load required libraries
library(shiny)
library(plotly)
library(gapminder)
library(dplyr)
ui <- fluidPage(
titlePanel("Gapminder Dashboard"),
radioButtons("vars", "Select Variable:",
choices = list("Life Expectancy" = "lifeExp",
"Population" = "pop",
"GDP per Capita" = "gdpPercap"),
selected = "gdpPercap",
inline = TRUE),
sliderInput("year_slider", "Select Year:",
min = min(gapminder$year),
max = max(gapminder$year),
value = min(gapminder$year),
step = 5,
sep = ""),
plotlyOutput("map")
)
server <- function(input, output, session) {
output$map <- renderPlotly({
data_filtered <- gapminder %>%
filter(year == input$year_slider)
plot_ly(data_filtered,
type = 'choropleth',
locations = ~country,
locationmode = 'country names',
z = as.formula(paste0("~", input$vars)),
colorscale = "Viridis",
marker = list(line = list(color = "gray", width = 0.5)),
colorbar = list(title = input$vars)) %>%
layout(title = paste("Gapminder Map -", input$year_slider),
geo = list(showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'equirectangular')))
})
}
shinyApp(ui, server)
getwd()
getwd()
getwd()
